let ball;

let leftPaddle;

let rightPaddle;

function setup() {

  createCanvas(800, 400);

  ball = new Ball();

  leftPaddle = new Paddle(true);

  rightPaddle = new Paddle(false);

}

function draw() {

  background(0);

  ball.update();

  ball.show();

  

  leftPaddle.show();

  leftPaddle.update();

  

  rightPaddle.show();

  rightPaddle.update();

  

  ball.checkPaddle(leftPaddle);

  ball.checkPaddle(rightPaddle);

}

class Ball {

  constructor() {

    this.reset();

  }

  reset() {

    this.position = createVector(width / 2, height / 2);

    this.velocity = createVector(random(-5, 5), random(-5, 5));

    this.radius = 12;

  }

  update() {

    this.position.add(this.velocity);

    

    // Bounce off top and bottom

    if (this.position.y < this.radius || this.position.y > height - this.radius) {

      this.velocity.y *= -1;

    }

    // Reset if out of bounds

    if (this.position.x < 0 || this.position.x > width) {

      this.reset();

    }

  }

  show() {

    fill(255);

    ellipse(this.position.x, this.position.y, this.radius * 2);

  }

  checkPaddle(paddle) {

    if (this.position.x - this.radius < paddle.x + paddle.width && 

        this.position.x + this.radius > paddle.x && 

        this.position.y > paddle.y && 

        this.position.y < paddle.y + paddle.height) {

      this.velocity.x *= -1;

    }

  }

}

class Paddle {

  constructor(isLeft) {

    this.width = 10;

    this.height = 80;

    this.isLeft = isLeft;

    this.y = height / 2 - this.height / 2;

    this.x = isLeft ? 0 : width - this.width;

  }

  update() {

    if (this.isLeft) {

      if (keyIsDown(87)) { // W key

        this.y -= 5;

      }

      if (keyIsDown(83)) { // S key

        this.y += 5;

      }

    } else {

      if (keyIsDown(UP_ARROW)) {

        this.y -= 5;

      }

      if (keyIsDown(DOWN_ARROW)) {

        this.y += 5;

      }

    }

    

    // Prevent paddles from going out of bounds

    this.y = constrain(this.y, 0, height - this.height);

  }

  show() {

    fill(255);

    rect(this.x, this.y, this.width, this.height);

  }

}


  



  
